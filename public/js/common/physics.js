// Code generated by deno task bundle. DO NOT EDIT. Unless you're a 1337H4X0R.
// Then move on.

import { BlockType, ZP } from "/public/js/common/types.js";
var Origin;
(function (Origin) {
    Origin["client"] = "client";
    Origin["server"] = "server";
})(Origin || (Origin = {}));
export class Engine {
    constructor(origin, map, player, entities) {
        this.origin = origin;
        this.map = map;
        this.player = player;
        this.entities = entities;
    }
    tick(deltaTime = 1) {
        const updates = [];
        for (const entity of this.entities) {
            const pos = { ...entity.position }; // copy so tickEntity can mutate
            this.tickEntity(entity, deltaTime);
            if (pos.x != entity.position.x || pos.y != entity.position.y) {
                updates.push(entity);
            }
        }
        const collisions = this.detector();
        for (const collision of collisions) {
            this.resolver(collision);
        }
        return updates;
    }
    tickEntity(entity, deltaTime = 1) {
        entity.tick(deltaTime);
        // accel is for gravity or friction accel.
        const accel = ZP();
        accel.y = this.isGrounded(entity) ? 0 : Engine.gravity;
        const isTouchingBlock = this.isTouchingBlock(entity);
        entity.velocity.x *= isTouchingBlock ? Engine.frictionCoef : Engine.airFrictionCoef;
        entity.velocity.x += (entity.acceleration.x + accel.x) * deltaTime;
        entity.velocity.x = Math.min(entity.velocity.x, Engine.maxSpeed);
        if (Math.abs(entity.velocity.x) < 0.001) {
            entity.velocity.x = 0;
        }
        entity.velocity.y *= isTouchingBlock ? Engine.frictionCoef : Engine.airFrictionCoef;
        entity.velocity.y += (entity.acceleration.y + accel.y) * deltaTime;
        entity.velocity.y = Math.min(entity.velocity.y, Engine.maxSpeed);
        if (Math.abs(entity.velocity.y) < 0.001) {
            entity.velocity.y = 0;
        }
        entity.position.x += entity.velocity.x * deltaTime;
        entity.position.y += entity.velocity.y * deltaTime;
        entity.position.x = clamp(entity.position.x, 0, this.map.width);
        entity.position.y = clamp(entity.position.y, 0, this.map.height);
    }
    resolver(collisionPair) {
        const body1 = collisionPair[0];
        const body2 = collisionPair[1];
        /* Involves a static body */
        if (body1.isStatic || body2.isStatic) {
            let staticBody;
            let dynamicBody;
            if (body1.isStatic) {
                staticBody = body1;
                dynamicBody = body2;
            } else {
                staticBody = body2;
                dynamicBody = body1;
            }
            const diff = {
                x: staticBody.position.x - dynamicBody.position.x,
                y: staticBody.position.y - dynamicBody.position.y,
            };
            diff.x -= Math.sign(diff.x);
            diff.y -= Math.sign(diff.y);
            const surfaces = this.blockSurfaces(staticBody);
            this.applyNormalForce(dynamicBody, diff, surfaces);
            /* Does not involve a static body */
        } else {
            const diff = {
                x: body1.position.x - body2.position.x,
                y: body1.position.y - body2.position.y,
            };
            diff.x -= Math.sign(diff.x);
            diff.y -= Math.sign(diff.y);
            this.applyNormalForces(body1, body2, diff);
        }
    }
    detector() {
        return (this.origin == Origin.server) ? this.serverDetector() : this.clientDetector();
    }
    serverDetector() {
        /*
        const bodies: PhysicsBody[] = [];
        this.entities.forEach((e: Entity) => bodies.push(e));
        // TODO: Make this look for all surroundingBlocks near each entity, only unique blocks
        this.surroundingBlocks(this.player.position).forEach((e: PhysicsBody) => bodies.push(e));
        return this.getCollisionPairs(bodies, (body1: PhysicsBody, body2: PhysicsBody): boolean => {
            return body1.block != "P" && body2.block == "P";
        });
        */
        return [];
    }
    clientDetector() {
        const bodies = [];
        bodies.push(this.player);
        this.entities.forEach((e) => {
            if (e.block != "P") {
                bodies.push(e);
            }
        });
        // TODO: Fix this, not all are static
        bodies.forEach((b) => {
            b.isStatic = false;
        });
        for (const block of this.surroundingBlocks(this.player.position)) {
            if (intersection(block, this.player)) {
                bodies.push(block);
                //break;
            }
        }
        return this.getCollisionPairs(bodies, (body1, body2) => {
            return body1.block == "P" || body2.block == "P";
        });
    }
    getCollisionPairs(physicsBodies, condition) {
        const intersectingBodies = [];
        for (let i = 0; i < physicsBodies.length; i++) {
            for (let j = i + 1; j < physicsBodies.length; j++) {
                const body1 = physicsBodies[i];
                const body2 = physicsBodies[j];
                if (condition(body1, body2) && intersection(body1, body2)) {
                    intersectingBodies.push([body1, body2]);
                }
            }
        }
        return intersectingBodies;
    }
    surroundingBlocks(pos) {
        const blocks = [];
        for (let x = Math.floor(pos.x - 1); x <= Math.ceil(pos.x + 1); x++) {
            for (let y = Math.floor(pos.y - 1); y <= Math.ceil(pos.y + 1); y++) {
                const block = this.map.at({ x, y });
                if (!block || this.map.blockType(block) != BlockType.Block) {
                    continue;
                }
                const mods = this.map.blockMods(block);
                if (mods && mods.includes("air")) {
                    continue;
                }
                blocks.push({ position: { x, y }, block, isStatic: true });
            }
        }
        return blocks;
    }
    blockSurfaces(block) {
        const result = [1, 1, 1, 1];
        let { x, y } = block.position;
        if (this.isSolidBlock(this.map.at({ x: x, y: y - 1 }))) {
            result[0] = 0;
        }
        if (this.isSolidBlock(this.map.at({ x: x + 1, y: y }))) {
            result[1] = 0;
        }
        if (this.isSolidBlock(this.map.at({ x: x, y: y - 1 }))) {
            result[2] = 0;
        }
        if (this.isSolidBlock(this.map.at({ x: x - 1, y: y }))) {
            result[3] = 0;
        }
        return result;
    }
    isGrounded(body) {
        const x_dec = getDecimal(body.position.x);
        const y_dec = getDecimal(body.position.y);
        let x_offset = 0;
        let y_offset = 0;
        if (y_dec < 0.95 && y_dec > 0.05) {
            return false;
        }
        if (x_dec >= 0.98) {
            x_offset = 1;
        }
        if (x_dec <= 0.02) {
            x_offset = -1;
        }
        if (y_dec >= 0.95) {
            y_offset = -1;
        }
        if (y_dec <= 0.05) {
            y_offset = 1;
        }
        const leftBlock = this.map.at({
            x: Math.floor(body.position.x) + x_offset,
            y: Math.floor(body.position.y) + y_offset + 1,
        });
        const rightBlock = this.map.at({
            x: Math.ceil(body.position.x) + x_offset,
            y: Math.floor(body.position.y) + y_offset + 1,
        });
        if (x_offset == 0 && rightBlock && this.map.blockType(rightBlock) == BlockType.Block) {
            const rightMods = this.map.blockMods(rightBlock);
            if (!(rightMods && rightMods.includes("air"))) {
                return true;
            }
        }
        if (leftBlock && this.map.blockType(leftBlock) == BlockType.Block) {
            const leftMods = this.map.blockMods(leftBlock);
            if (!(leftMods && leftMods.includes("air"))) {
                return true;
            }
        }
        return false;
    }
    isTouchingBlock(body) {
        const blocks = this.surroundingBlocks(body.position);
        for (const block of blocks) {
            if (intersection(body, block, 1.1)) {
                return true;
            }
        }
        return false;
    }
    applyNormalForces(body1, body2, diff) {
        const x_normal = minimumForce(diff.x * Engine.normalForceRatio / 2, Engine.minimumNormalForce);
        const y_normal = minimumForce(diff.y * Engine.normalForceRatio / 2, Engine.minimumNormalForce);
        body1.position.x += -x_normal;
        body1.position.y += -y_normal;
        body2.position.x += x_normal;
        body2.position.y += y_normal;
    }
    applyNormalForce(body, diff, surfaces = [1, 1, 1, 1]) {
        let x_normal = minimumForce(diff.x * Engine.normalForceRatio, Engine.minimumNormalForce);
        let y_normal = minimumForce(diff.y * Engine.normalForceRatio, Engine.minimumNormalForce);
        if (y_normal < 0) {
            y_normal *= surfaces[0];
        }
        if (x_normal > 0) {
            x_normal *= surfaces[1];
        }
        if (y_normal > 0) {
            y_normal *= surfaces[2];
        }
        if (x_normal < 0) {
            x_normal *= surfaces[3];
        }
        body.position.x += x_normal;
        body.position.y += y_normal;
    }
    isSolidBlock(block) {
        if (!block || this.map.blockType(block) != BlockType.Block) {
            return false;
        }
        const mods = this.map.blockMods(block);
        if (mods && mods.includes("air")) {
            return false;
        }
        return true;
    }
}
Engine.gravity = 0.025;
Engine.frictionCoef = 0.85;
Engine.airFrictionCoef = 0.95;
Engine.normalForceRatio = 1;
Engine.minimumNormalForce = 0;
Engine.maxSpeed = 0.5;
function getDecimal(x) {
    return x - Math.floor(x);
}
function minimumForce(force, absMin) {
    if (Math.abs(force) > absMin) {
        return force;
    }
    return absMin * Math.sign(force);
}
function intersection(body1, body2, d = 1) {
    return (Math.abs(body1.position.x - body2.position.x) < d && Math.abs(body1.position.y - body2.position.y) < d);
}
function clamp(n, lo, hi) {
    return Math.min(Math.max(n, lo), hi);
}
