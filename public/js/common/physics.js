// Code generated by deno task bundle. DO NOT EDIT. Unless you're a 1337H4X0R.
// Then move on.

import { BlockType } from "/public/js/common/types.js";
export class Engine {
    constructor(map) {
        this.map = map;
        this.gravity = 0.3;
    }
    tickEntities(entities, deltaTime = 0) {
        const updates = [];
        for (const [_, entity] of entities) {
            const pos = { ...entity.position }; // copy so tickEntity can mutate
            this.tickEntity(entity, deltaTime);
            if (pos.x != entity.position.x || pos.y != entity.position.y) {
                updates.push(entity);
            }
        }
        return updates;
    }
    tickEntity(entity, deltaTime = 1) {
        const isGrounded = this.isGrounded(entity);
        if (isGrounded) {
            entity.velocity.y = 0;
            entity.acceleration.y = 0;
        }
        entity.velocity.x += entity.acceleration.x * deltaTime;
        entity.velocity.y += entity.acceleration.y * deltaTime;
        entity.tick(deltaTime);
        entity.position.x += entity.velocity.x * deltaTime;
        entity.position.y += entity.velocity.y * deltaTime;
    }
    isGrounded(entity) {
        return false ||
            this.positionIsGround({ x: Math.ceil(entity.position.x), y: Math.ceil(entity.position.y) }) ||
            this.positionIsGround({ x: Math.ceil(entity.position.x), y: Math.ceil(entity.position.y) - 1 });
    }
    positionIsGround(pos) {
        const block = this.map.at(pos);
        if (!block) {
            return false;
        }
        const btype = this.map.blockType(block);
        if (!btype || btype == BlockType.Entity) {
            return false;
        }
        const mods = this.map.blockMods(block);
        if (mods.includes("air")) {
            return false;
        }
        return true;
    }
}
